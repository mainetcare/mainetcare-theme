@mixin mobile {
  @media screen and (max-width: 768px) {
    @content;
  }
}

@mixin tablet {
  @media screen and (max-width: 1023px) {
    @content;
  }
}

@mixin desktop {
  @media screen and (min-width: 1024px) {
    @content;
  }
}

@mixin tv {
  @media only screen and (min-width: 1900px) {
    @content;
  }
}

@mixin hutgroesse($y) {
  $x: 2.6 * $y;
  height: $y;
  width: $x;
}

@mixin blumengroesse($y) {
  height: $y;
  width: $y;
}


@mixin button-green {
  &:hover {
    background-color: $color_mnc_blau;
  }
  background-color: $color_mnc_gruen;
  color: white;
  span {
    color: white;
  }
}

@mixin button-blue {
  background-color: $color_mnc_blau;
  color: white;
  span {
    color: white;
  }
  &:hover {
    background-color: #0d3147;
    color: white;
    border: 1px solid #FFFFFF;
  }
}

@mixin badge {
  text-decoration: none !important;
  line-height: 1rem;
  display: inline-block;
  background-color: var(--color-mnc-gruen);
  color: white;
  font-weight: 600;
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.05rem;
  border-radius: 0.5rem;
  padding: 0.25rem 0.5rem;
  &:hover {
    text-decoration: underline !important;
  }
}


@mixin list-square {
  list-style-position: inside;
  position: relative;
  & > li {
    margin-top: 0.5rem;
    position: relative;
    list-style: none;
    padding-left: 1rem;
  }
  & > li:before {
    content: '';
    position: absolute;
    width: 10px;
    height: 10px;
    background: var(--color-mnc-blau);
    border-radius: 0;
    left: 0;
    top: 10px;
  }
}

@mixin no-list {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

@mixin uppercase {
  text-transform: uppercase;
  letter-spacing: 0.1em;
}

@mixin hide_from_dom {
  display: none !important;
  visibility: hidden;
}

@mixin hide_from_screen {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  &.focusable {
    &:active, &:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
    }
  }
}


$screen-lg-min: 1200px;
$screen-md-min: 1024px;
$screen-md-max: $screen-lg-min - 1;
$screen-sm-min: 768px;
$screen-sm-max: 991px;

$screen-xs-max: $screen-sm-min - 1;

@mixin bp($point) {
  @if $point == desktop {
    @media (min-width: $screen-lg-min) {
      @content;
    }
  } @else if $point == laptop {
    @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
      @content;
    }
  } @else if $point == tablet {
    @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
      @content;
    }
  } @else if $point == mobile {
    @media (max-width: $screen-xs-max) {
      @content;
    }
  } @else if $point == larger_mobile {
    @media (min-width: $screen-sm-min) {
      @content;
    }
  } @else if $point == larger_tablet {
    @media (min-width: $screen-md-min) {
      @content;
    }
  } @else if $point == smaller_desktop {
    @media (max-width: $screen-md-max) {
      @content;
    }
  } @else if $point == smaller_laptop {
    @media (max-width: $screen-sm-max) {
      @content;
    }
  }
}

@mixin top_link($color) {
  display: none;
  right: 10px;
  position: fixed;
  width: 150px;
  margin: 0 auto;
  text-align: center;
  bottom: 5px;
  color: $color;
  font-weight: bold;
  text-decoration: none;
  border: 1px solid $color;
  border-radius: 5px;
  background: lighten($color, 55%);
  padding: 5px 10px;
}

@mixin reset_links() {
  a, a:link, a:visited, a:hover, a:active {
    text-decoration: none;
    color: $link-color;
  }
  a:hover {
    color: darken($link-color, 10%);
  }
}

@mixin mi_clearfix_brute_force() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
  zoom: 1; /* For IE 6/7 (trigger hasLayout) */
}

@mixin mi_clearfix_sass_example {
  display: inline-block;
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
  * html & {
    height: 1px
  }
}

@mixin mi_clearfix {
  content: "";
  display: table;
  clear: both;
}

@mixin mi_clearfix_older {
  &:after {
    content: " ";
    clear: both;
    display: block;
    visibility: hidden;
    height: 0;
  }
}

$em-base: 16 !default;
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts "px" to "em" using the ($)em-base
@function convert-to-em($value) {
  $value: strip-unit($value) / strip-unit($em-base) * 1em;
  @if ($value == 0em) {
    $value: 0;
  }
  // Turn 0em into 0
  @return $value;
}

// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#)
// Just enter the number, no need to mention "px"
@function emCalc($values...) {
  $max: length($values); // Get the total number of parameters passed

  // If there is only 1 parameter, then return it as an integer.
  // This is done because a list can't be multiplied or divided even if it contains a single value
  @if $max == 1 {
    @return convert-to-em(nth($values, 1));
  }

  $emValues: (); // This will eventually store the converted $values in a list
  @for $i from 1 through $max {
    $emValues: append($emValues, convert-to-em(nth($values, $i)));
  }
  @return $emValues;
}