@mixin mobile {
  @media screen and (max-width: 768px) {
    @content;
  }
}


@mixin tablet {
  @media screen and (max-width: 1023px) {
    @content;
  }
}

@mixin desktop {
  @media screen and (min-width: 1024px) {
    @content;
  }
}

@mixin tv {
  @media only screen and (min-width: 1900px) {
    @content;
  }
}

@mixin black-link {
  a {
    color:var(--color-mnc-text);
    &[aria-current='page'], &.active {
      color:var(--color-mnc-gruen)
    }
    &:hover {
      text-decoration: underline;
    }
  }
}

@mixin hutgroesse($y) {
  $x: 2.6 * $y;
  height: $y;
  width: $x;
}

@mixin blumengroesse($y) {
  height: $y;
  width: $y;
}

@mixin button($color, $hover_color, $text_color) {
  a[role="button"], input[type="submit"] {
    @include uppercase;
    transition: all 200ms ease-in;
    background-color: $color !important;
    border-color: $color !important;
    color: $text_color !important;
    &:hover {
      background-color: $hover_color !important;
      border-color: $hover_color !important;
    }
    span {
      @include uppercase;
      color: $text_color !important;
    }
  }
}


@mixin badge {
  text-decoration: none !important;
  line-height: 0 !important;
  display: block;
  padding: 10px 6px;
  background-color: var(--color-mnc-gruen);
  color: white;
  font-weight: 700;
  font-size:0.625rem;
  text-transform: uppercase;
  letter-spacing: 1px;
  border-radius: 0.25rem;
  &:hover {
    text-decoration: underline !important;
  }
}

@mixin error {
  background-color: var(--color-mnc-error-bg);
  border:2px solid var(--color-mnc-error-border);
  color:var(--color-mnc-text);
  font-size:0.9rem;
}

@mixin nicer-list($content, $size, $left) {
  list-style: none;
  margin: 0;
  li {
    margin-left: $size * 1.5;
    position: relative;
  }
  li {
    &:before {
      content: $content;
      font-size: $size;
      position: absolute;
      width: $size;
      line-height: $size;
      left: -$left;
      top: 4px;
      display: inline-block;
      margin-left: -$size;
    }
  }
}


@mixin list-square {
  list-style-position: inside;
  position: relative;
  & > li {
    margin-top: 0.5rem;
    position: relative;
    list-style: none;
    padding-left: 1rem;
  }
  & > li:before {
    content: '';
    position: absolute;
    width: 8px;
    height: 8px;
    background: var(--color-mnc-text);
    border-radius: 8px;
    left: 0;
    top: 10px;
  }
}

@mixin no-list {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

@mixin uppercase {
  text-transform: uppercase;
  letter-spacing: 3px;
}

@mixin hide_from_dom {
  display: none !important;
  visibility: hidden;
}

@mixin hide_from_screen {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  &.focusable {
    &:active, &:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
    }
  }
}

@mixin skip_main() {
  left:-999px;
  position:absolute;
  top:auto;
  width:1px;
  height:1px;
  overflow:hidden;
  z-index:-999;
  &:focus, &:active {
    color: #000;
    background-color:#FFF;
    left: auto;
    top: auto;
    width: 30%;
    height: auto;
    overflow:auto;
    margin: 10px 35%;
    padding:5px;
    border-radius: 15px;
    border:3px solid red;
    text-align:center;
    font-size:1.2em;
    z-index:999;
  }
}

@mixin top_link($color) {
  display: none;
  right: 10px;
  position: fixed;
  width: 150px;
  margin: 0 auto;
  text-align: center;
  bottom: 5px;
  color: $color;
  font-weight: bold;
  text-decoration: none;
  border: 1px solid $color;
  border-radius: 5px;
  background: lighten($color, 55%);
  padding: 5px 10px;
}

@mixin reset_links() {
  a, a:link, a:visited, a:hover, a:active {
    text-decoration: none;
    color: $link-color;
  }
  a:hover {
    color: darken($link-color, 10%);
  }
}

@mixin mi_clearfix_brute_force() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
  zoom: 1; /* For IE 6/7 (trigger hasLayout) */
}

@mixin mi_clearfix_sass_example {
  display: inline-block;
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
  * html & {
    height: 1px
  }
}

@mixin mi_clearfix {
  content: "";
  display: table;
  clear: both;
}

@mixin mi_clearfix_older {
  &:after {
    content: " ";
    clear: both;
    display: block;
    visibility: hidden;
    height: 0;
  }
}

$em-base: 16 !default;
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts "px" to "em" using the ($)em-base
@function convert-to-em($value) {
  $value: strip-unit($value) / strip-unit($em-base) * 1em;
  @if ($value == 0em) {
    $value: 0;
  }
  // Turn 0em into 0
  @return $value;
}

// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#)
// Just enter the number, no need to mention "px"
@function emCalc($values...) {
  $max: length($values); // Get the total number of parameters passed

  // If there is only 1 parameter, then return it as an integer.
  // This is done because a list can't be multiplied or divided even if it contains a single value
  @if $max == 1 {
    @return convert-to-em(nth($values, 1));
  }

  $emValues: (); // This will eventually store the converted $values in a list
  @for $i from 1 through $max {
    $emValues: append($emValues, convert-to-em(nth($values, $i)));
  }
  @return $emValues;
}